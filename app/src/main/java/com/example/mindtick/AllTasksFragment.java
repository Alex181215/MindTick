package com.example.mindtick;

import android.app.AlertDialog;
import android.content.ContentValues;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.os.Bundle;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.content.ContextCompat;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentTransaction;
import androidx.recyclerview.widget.ItemTouchHelper;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.AnimationUtils;
import android.widget.TextView;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Random;

import Adapter.TaskAdapter;
import Data.DatabaseHandler;
import Model.Task;
import Utils.ReminderHelper;
import Utils.Util;

public class AllTasksFragment extends Fragment implements OnTaskUpdatedListener{
    private RecyclerView recyclerView;
    private TaskAdapter taskAdapter;
    private List<Object> itemList = new ArrayList<>();
    private DatabaseHandler db;
    private TextView emptyTextView;
    private TaskAdapter adapter;


    private static final String[] NO_TASK_MESSAGES = {
            "–í—ã –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏. –°–∞–º–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞—Ç—å! ‚úçÔ∏è",
            "–ü—É—Å—Ç–æ... –Ω–æ –≤–µ–¥—å —ç—Ç–æ –Ω–µ–Ω–∞–¥–æ–ª–≥–æ, –≤–µ—Ä–Ω–æ? ü§î",
            "–ó–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç. –ù–æ –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å! ‚ûï",
            "–í—Å–µ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º! –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ? üòè",
            "–ù–µ—Ç –∑–∞–¥–∞—á ‚Äî –Ω–µ—Ç –∑–∞–±–æ—Ç? –î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –ø–µ—Ä–≤—É—é! üéØ",
            "–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫–∞ –ø—É—Å—Ç. –ú–æ–∂–µ—Ç, –Ω–∞—á–Ω–µ–º —Å —á–µ–≥–æ-—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ? ‚òï",
            "–°–µ–≥–æ–¥–Ω—è –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–µ–ª–∞! üìÖ",
            "–°–≤–æ–±–æ–¥–∞ ‚Äî —ç—Ç–æ –∫—Ä—É—Ç–æ! –ù–æ —Ö–æ—Ç—å –æ–¥–Ω—É –∑–∞–¥–∞—á—É —Å—Ç–æ–∏—Ç –∑–∞–ø–∏—Å–∞—Ç—å. üòâ",
            "–ó–∞–¥–∞—á –Ω–µ—Ç... –ò–ª–∏ —ç—Ç–æ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–µ—á—Ç—ã? ‚ú®",
            "–í–∞—à —Å–ø–∏—Å–æ–∫ –¥–µ–ª –∂–¥–µ—Ç –ø–µ—Ä–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π. –°–¥–µ–ª–∞–µ–º —ç—Ç–æ! üöÄ",
            "–ü–æ–∫–∞ –ø—É—Å—Ç–æ, –Ω–æ –≤–µ–¥—å –≤–µ–ª–∏–∫–∏–µ –¥–µ–ª–∞ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –º–∞–ª–æ–≥–æ! üî•",
            "–ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –Ω–∞ –ø–æ—Ç–æ–º. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! ‚è≥",
            "–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞. –í–ø–µ—Ä–µ–¥! üèÅ",
            "–ó–¥–µ—Å—å –ø–æ–∫–∞ —Ç–∏—Ö–æ... –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫! üìñ",
            "–¢—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å —Å —á–µ–≥–æ —É–≥–æ–¥–Ω–æ. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–∞—á–∞—Ç—å! üé¨",
            "–í—Ä–µ–º—è —Ç–≤–æ—Ä–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! –î–æ–±–∞–≤—å –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É. ‚ö°",
            "–ü—É—Å—Ç–æ? –ó–Ω–∞—á–∏—Ç, –µ—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –∏–¥–µ–π! üí°",
            "–û–¥–Ω–∞ –∑–∞–¥–∞—á–∞ ‚Äì —ç—Ç–æ —É–∂–µ –Ω–∞—á–∞–ª–æ! –ü–æ–ø—Ä–æ–±—É–π! üöÄ",
            "–ö–∞–∫ –Ω–∞—Å—á–µ—Ç –Ω–µ–±–æ–ª—å—à–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞? –î–æ–±–∞–≤—å –∑–∞–¥–∞—á—É! üí™",
            "–¢–≤–æ–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫–∞ –ø—É—Å—Ç, –Ω–æ –≤–ø–µ—Ä–µ–¥–∏ —Å—Ç–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ! üî•",
            "–ö–∞–∂–¥–æ–µ –±–æ–ª—å—à–æ–µ –¥–µ–ª–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –æ–¥–Ω–æ–≥–æ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —à–∞–≥–∞. –°–¥–µ–ª–∞–π –µ–≥–æ! üèÜ",
            "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É! –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É. üîë",
            "–°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π —à–∞–Ω—Å —Å—Ç–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–µ–µ! –ù–∞—á–Ω–µ–º? ‚úÖ",
            "–¢—ã —Ö–æ–∑—è–∏–Ω —Å–≤–æ–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ù–∞–ø–æ–ª–Ω–∏ —Å–ø–∏—Å–æ–∫ –≤–∞–∂–Ω—ã–º–∏ –¥–µ–ª–∞–º–∏! ‚è≥",
            "–ù–æ–≤—ã–π –¥–µ–Ω—å ‚Äì –Ω–æ–≤—ã–µ —Ü–µ–ª–∏! –ü–æ—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É. üåû",
            "–î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ—Ç –¥–µ–Ω—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º! –ù–∞—á–Ω–∏ —Å –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏. üöÄ"
    };


    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_all_tasks, container, false);
        recyclerView = view.findViewById(R.id.recyclerView);
        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));
        emptyTextView = view.findViewById(R.id.emptyTextView);

        db = new DatabaseHandler(getContext());
        adapter = new TaskAdapter(getContext(), itemList, false, db, false, true, this); // –¥–ª—è –í—Å–µ –∑–∞–¥–∞—á–∏
        adapter.setOnTaskUpdatedListener(() -> {
            Log.d("TodayFragment", "–û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è");
            loadItems(); // —Ç–≤–æ–π –º–µ—Ç–æ–¥, —Ñ–∏–ª—å—Ç—Ä—É—é—â–∏–π –∑–∞–¥–∞—á–∏ –ø–æ –¥–∞—Ç–µ
            adapter.notifyDataSetChanged();
        });
        loadItems();
        recyclerView.setAdapter(adapter);

        ItemTouchHelper.SimpleCallback simpleCallback = new ItemTouchHelper.SimpleCallback(0,
                ItemTouchHelper.RIGHT | ItemTouchHelper.LEFT) {
            @Override
            public boolean onMove(@NonNull RecyclerView recyclerView,
                                  @NonNull RecyclerView.ViewHolder viewHolder,
                                  @NonNull RecyclerView.ViewHolder target) {
                return false;
            }

            @Override
            public void onSwiped(@NonNull RecyclerView.ViewHolder viewHolder, int direction) {
                int position = viewHolder.getAdapterPosition();
                Object item = itemList.get(position);

                if (item instanceof Task) {
                    Task task = (Task) item;

                    if (direction == ItemTouchHelper.RIGHT) {
                        // üî• **–°–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ ‚Äì –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è**
                        showConfirmationDialog("–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é?", () -> {
                            markTaskAsCompleted(task, position);
                        }, () -> {
                            recyclerView.getAdapter().notifyItemChanged(position);
                        });

                    } else if (direction == ItemTouchHelper.LEFT) {
                        // ‚ùå **–°–≤–∞–π–ø –≤–ª–µ–≤–æ ‚Äì –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è**
                        showConfirmationDialog("–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É?", () -> {
                            deleteTask(task, position);
                        }, () -> {
                            recyclerView.getAdapter().notifyItemChanged(position);
                        });
                    }

                } else {
                    // –ï—Å–ª–∏ —ç—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –æ—Ç–º–µ–Ω—è–µ–º —Å–≤–∞–π–ø
                    recyclerView.getAdapter().notifyItemChanged(position);
                }
            }
        };

// –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–≤–∞–π–ø –∫ RecyclerView
        ItemTouchHelper itemTouchHelper = new ItemTouchHelper(simpleCallback);
        itemTouchHelper.attachToRecyclerView(recyclerView);

        return view;
    }

    private void showConfirmationDialog(String message, Runnable onConfirm, Runnable onCancel) {
        AlertDialog dialog = new AlertDialog.Builder(getContext(), R.style.CustomDialog)
                .setMessage(message)
                .setPositiveButton("–î–∞", (dialogInterface, which) -> onConfirm.run())
                .setNegativeButton("–û—Ç–º–µ–Ω–∞", (dialogInterface, which) -> onCancel.run())
                .setCancelable(false)
                .create(); // –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥, –Ω–æ –ø–æ–∫–∞ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º

        dialog.show(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥

        // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç–∞ –∏–∑ —Ä–µ—Å—É—Ä—Å–æ–≤
        int positiveColor = ContextCompat.getColor(getContext(), R.color.all_text);
        int negativeColor = ContextCompat.getColor(getContext(), R.color.all_text);
        int messageColor = ContextCompat.getColor(getContext(), R.color.title_text);

        // –ü–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞ –º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫–Ω–æ–ø–æ–∫
        dialog.getButton(AlertDialog.BUTTON_POSITIVE).setTextColor(positiveColor);  // "–î–∞"
        dialog.getButton(AlertDialog.BUTTON_NEGATIVE).setTextColor(negativeColor); // "–û—Ç–º–µ–Ω–∞"

        // **–ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è**
        TextView messageView = dialog.findViewById(android.R.id.message);
        if (messageView != null) {
            messageView.setTextColor(messageColor);
        }
    }


    private void markTaskAsCompleted(Task task, int position) {
        SQLiteDatabase database = db.getWritableDatabase();
        ContentValues values = new ContentValues();

        String completedAt = new SimpleDateFormat("dd.MM.yyyy HH:mm", Locale.getDefault()).format(new Date());
        values.put(Util.KEY_STATUS, 0); // 0 = –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
        values.put(Util.KEY_COMPLETED_AT, completedAt);

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
        Log.d("CompleteDebug", "Time before update: " + task.getTime());


        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ –æ–Ω–æ –∑–∞–¥–∞–Ω–æ
        if (!task.getTime().isEmpty()) {
            values.put(Util.KEY_TIME, task.getTime()); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        }

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
        Log.d("CompleteDebug", "Time before update: " + task.getTime());

        database.update(Util.TABLE_NAME, values, Util.KEY_ID + " = ?", new String[]{String.valueOf(task.getId())});
        database.close();

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º getContext() –∏–ª–∏ requireContext(), –µ—Å–ª–∏ –∞–¥–∞–ø—Ç–µ—Ä –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Fragment
        if (getContext() != null) {
            ReminderHelper.cancelAlarm(getContext(), task);
        } else {
            Log.e("TaskAdapter", "Context is null. Cannot cancel alarm.");
        }

        // –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞
        itemList.remove(position);
        recyclerView.getAdapter().notifyItemRemoved(position);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É–¥–∞–ª—è–µ–º –ø—É—Å—Ç—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        checkAndRemoveEmptyCategory(task);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç –ª–∏ —ç–∫—Ä–∞–Ω
        checkTasks();
    }

    private void deleteTask(Task task, int position) {
        SQLiteDatabase database = db.getWritableDatabase();
        database.delete(Util.TABLE_NAME, Util.KEY_ID + " = ?", new String[]{String.valueOf(task.getId())});
        database.close();

        // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
        itemList.remove(position);
        recyclerView.getAdapter().notifyItemRemoved(position);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É–¥–∞–ª—è–µ–º –ø—É—Å—Ç—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        checkAndRemoveEmptyCategory(task);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç –ª–∏ —ç–∫—Ä–∞–Ω
        checkTasks();
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—É—Å—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    private void checkAndRemoveEmptyCategory(Task task) {
        String category = task.getCategory(); // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞—á–∏
        if (category == null || category.isEmpty()) return; // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç ‚Äî –≤—ã—Ö–æ–¥–∏–º

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –∑–∞–¥–∞—á–∏ —Å —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
        boolean isCategoryEmpty = true;
        for (Object obj : itemList) {
            if (obj instanceof Task) {
                Task currentTask = (Task) obj;
                if (category.equals(currentTask.getCategory())) {
                    isCategoryEmpty = false;
                    break;
                }
            }
        }

        // –ï—Å–ª–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –∑–∞–¥–∞—á ‚Äî —É–¥–∞–ª—è–µ–º –µ—ë –∏–∑ —Å–ø–∏—Å–∫–∞
        if (isCategoryEmpty) {
            itemList.removeIf(obj -> obj instanceof String && obj.equals(category));

            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥–∞–ø—Ç–µ—Ä
            recyclerView.getAdapter().notifyDataSetChanged();
        }
    }


    private void loadItems() {
        itemList.clear();
        LinkedHashMap<String, List<Task>> categoryMap = new LinkedHashMap<>();

        SQLiteDatabase database = db.getReadableDatabase();

        // –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        Cursor cursor = database.query(Util.TABLE_NAME, null, Util.KEY_STATUS + " = ?",
                new String[]{"1"}, null, null, Util.KEY_CATEGORY);

        if (cursor != null && cursor.moveToFirst()) {
            do {
                Task task = new Task();
                task.setId(cursor.getInt(cursor.getColumnIndexOrThrow(Util.KEY_ID)));
                task.setTitle(cursor.getString(cursor.getColumnIndexOrThrow(Util.KEY_TITLE)));
                task.setCategory(cursor.getString(cursor.getColumnIndexOrThrow(Util.KEY_CATEGORY)));
                task.setDate(cursor.getString(cursor.getColumnIndexOrThrow(Util.KEY_DATE)));
                task.setTime(cursor.getString(cursor.getColumnIndexOrThrow(Util.KEY_TIME)));
                task.setDescription(cursor.getString(cursor.getColumnIndexOrThrow(Util.KEY_DESCRIPTION)));

                // –ó–ê–ì–†–£–ñ–ê–ï–ú –ü–†–ò–û–†–ò–¢–ï–¢
                task.setPriority(cursor.getInt(cursor.getColumnIndexOrThrow(Util.KEY_PRIORITY)));

                task.setReminderEnabled(cursor.getInt(cursor.getColumnIndexOrThrow(Util.KEY_REMINDER_ENABLED)));  // –ü—Ä—è–º–æ–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ

                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                String category = task.getCategory();
                if (!categoryMap.containsKey(category)) {
                    categoryMap.put(category, new ArrayList<>());
                }
                categoryMap.get(category).add(task);
            } while (cursor.moveToNext());
            cursor.close();
        }
        database.close();

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
        for (String category : categoryMap.keySet()) {
            List<Task> tasks = categoryMap.get(category);

            // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
            tasks.sort((task1, task2) -> {
                if (task1.getDate() != null && task2.getDate() != null) {
                    int dateComparison = task1.getDate().compareTo(task2.getDate());
                    if (dateComparison == 0) {
                        // –ï—Å–ª–∏ –¥–∞—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                        if (task1.getTime() != null && task2.getTime() != null) {
                            return task1.getTime().compareTo(task2.getTime());
                        } else if (task1.getTime() == null || task1.getTime().isEmpty()) {
                            return 1; // –ó–∞–¥–∞—á–∏ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –∏–¥—É—Ç –Ω–∏–∂–µ
                        } else {
                            return -1; // –ó–∞–¥–∞—á–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏–¥—É—Ç –≤—ã—à–µ
                        }
                    }
                    return dateComparison;
                } else if (task1.getDate() == null || task1.getDate().isEmpty()) {
                    return 1; // –ó–∞–¥–∞—á–∏ –±–µ–∑ –¥–∞—Ç—ã –∏–¥—É—Ç –≤–Ω–∏–∑
                } else {
                    return -1; // –ó–∞–¥–∞—á–∏ —Å –¥–∞—Ç–æ–π –∏–¥—É—Ç –≤—ã—à–µ
                }
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∑–∞–¥–∞—á–∏
            itemList.add(category); // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            itemList.addAll(tasks); // –í—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        }
        checkTasks();
    }

    private void checkTasks() {
        if (itemList.isEmpty()) {
            Random random = new Random();
            String message = NO_TASK_MESSAGES[random.nextInt(NO_TASK_MESSAGES.length)];
            emptyTextView.setText(message);
            emptyTextView.setVisibility(View.VISIBLE);
            recyclerView.setVisibility(View.GONE);
            emptyTextView.startAnimation(AnimationUtils.loadAnimation(getActivity(), R.anim.fade_in));
        } else {
            emptyTextView.setVisibility(View.GONE);
            recyclerView.setVisibility(View.VISIBLE);
        }
    }

    @Override
    public void onResume() {
        super.onResume();
        loadItems();
    }

    @Override
    public void onTaskUpdated() {
        Log.d("TaskUpdated", "onTaskUpdated –≤—ã–∑–≤–∞–Ω");  // –õ–æ–≥, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, —á—Ç–æ –º–µ—Ç–æ–¥ –±—ã–ª –≤—ã–∑–≤–∞–Ω
        loadItems();
      //  adapter.notifyDataSetChanged(); // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–∞–ø—Ç–µ—Ä, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
    }
}
