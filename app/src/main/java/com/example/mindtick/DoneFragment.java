package com.example.mindtick;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.ContentValues;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Canvas;
import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.content.ContextCompat;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.DefaultItemAnimator;
import androidx.recyclerview.widget.ItemTouchHelper;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.AnimationUtils;
import android.view.animation.OvershootInterpolator;
import android.widget.TextView;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Random;
import java.util.Set;

import Adapter.TaskAdapter;
import Data.DatabaseHandler;
import Model.Task;
import Utils.ReminderHelper;
import Utils.Util;

public class DoneFragment extends Fragment implements OnTaskUpdatedListener{
    private RecyclerView recyclerView;
    private List<Object> itemList = new ArrayList<>();
    private DatabaseHandler db;
    private TextView emptyTextView;
    private TaskAdapter adapter;

    private static final String[] COMPLETED_TASK_MESSAGES = {
            "–í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üéâ",
            "–ü—É—Å—Ç–æ... –ü–æ—Ç–æ–º—É —á—Ç–æ —Ç—ã —É–∂–µ –≤—Å–µ —Å–¥–µ–ª–∞–ª! üî•",
            "–ó–∞–¥–∞—á –Ω–µ—Ç, –Ω–æ –≤–µ–¥—å —Ç—ã –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è –Ω–∞ —ç—Ç–æ–º? üòâ",
            "–ù–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å ‚Äì —Ç—ã –ø—Ä–æ—Å—Ç–æ –º–∞—à–∏–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏! ü§ñ",
            "–¢—ã –ø–æ–±–µ–¥–∏–ª –≤—Å–µ –∑–∞–¥–∞—á–∏! –í—Ä–µ–º—è –¥–ª—è –Ω–æ–≤—ã—Ö —Å–≤–µ—Ä—à–µ–Ω–∏–π! üèÜ",
            "–í–æ—Ç —ç—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! –ú–æ–∂–Ω–æ –∏ –ø–µ—Ä–µ–¥–æ—Ö–Ω—É—Ç—å. üòå",
            "–í—Å–µ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º! –¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –º–∞—Å—Ç–µ—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. üß†",
            "–¢—ã —Ä–∞–∑–æ–±—Ä–∞–ª—Å—è —Å–æ –≤—Å–µ–º. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –º–æ–º–µ–Ω—Ç–æ–º! üåø",
            "–ù–µ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏... –¢–∞–∫ —á—Ç–æ –∂–µ —Ç—ã –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ? ü§î",
            "–¢—ã —Å–¥–µ–ª–∞–ª —ç—Ç–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –Ω–∞–≥—Ä–∞–¥—É. üç©",
            "–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –í—Ä–µ–º—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ü–µ–ª–∏. üéØ",
            "–¢–≤–æ–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª –ø—É—Å—Ç, –∞ —ç–Ω–µ—Ä–≥–∏—è –Ω–∞ –º–∞–∫—Å–∏–º—É–º–µ! üí°",
            "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —á—Ç–æ-—Ç–æ –ø—Ä–∏—è—Ç–Ω–æ–µ. üéÆ",
            "–¢—ã –∑–∞–∫—Ä—ã–ª –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã! –í—Ä–µ–º—è –Ω–µ–º–Ω–æ–≥–æ —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è. üèñÔ∏è",
            "–ß–∏—Å—Ç—ã–π —Å–ø–∏—Å–æ–∫ ‚Äì –∫–∞–∫ —á–∏—Å—Ç—ã–π —Ä–∞–∑—É–º. –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è –º–æ–º–µ–Ω—Ç–æ–º! üåø",
            "–¢—ã –ø—Ä–æ–∫–∞—á–∞–ª —Å–≤–æ—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–æ 100%! üöÄ",
            "–í—Å—ë —Å–¥–µ–ª–∞–Ω–æ! –ú–æ–∂–µ—Ç, –ø–æ—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ? üìù",
            "–ù–µ—Ç –∑–∞–¥–∞—á ‚Äì –Ω–µ—Ç —Å—Ç—Ä–µ—Å—Å–∞! –ù–æ —Ç—ã –≤–µ–¥—å –Ω–µ –ø—Ä–∏–≤—ã–∫ —Å–∏–¥–µ—Ç—å –±–µ–∑ –¥–µ–ª–∞? üòâ",
            "–¢—ã –≤ –∑–æ–Ω–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è! –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º —Å–≤–µ—Ä—à–µ–Ω–∏—è–º? üí™",
            "–ó–∞–¥–∞—á –Ω–µ—Ç, –Ω–æ —É–≤–µ—Ä–µ–Ω—ã –ª–∏ –≤—ã, —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–±—ã–ª–∏? üòâ",
            "–ú–æ–∂–µ—Ç, –ø–æ—Ä–∞ –≤—ã–ø–∏—Ç—å —á–∞—é –∏ –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –º–æ–º–µ–Ω—Ç–æ–º? üçµ",
            "–¢—ã —Ä–∞–∑–æ–±—Ä–∞–ª—Å—è —Å–æ –≤—Å–µ–º–∏ –¥–µ–ª–∞–º–∏. –ß–µ–º –∑–∞–π–º–µ—à—å—Å—è –¥–∞–ª—å—à–µ? üöÄ"
    };

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_done, container, false);
        recyclerView = view.findViewById(R.id.recyclerView);
        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));
        emptyTextView = view.findViewById(R.id.emptyTextView);

        db = new DatabaseHandler(getContext());
        adapter = new TaskAdapter(getContext(), itemList, false, db, true, false, this); // –¥–ª—è –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
        adapter.setOnTaskUpdatedListener(() -> {
            Log.d("TodayFragment", "–û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è");
            loadItems(); // —Ç–≤–æ–π –º–µ—Ç–æ–¥, —Ñ–∏–ª—å—Ç—Ä—É—é—â–∏–π –∑–∞–¥–∞—á–∏ –ø–æ –¥–∞—Ç–µ
            adapter.notifyDataSetChanged();
        });
        loadItems();
        recyclerView.setAdapter(adapter);

        ItemTouchHelper.SimpleCallback simpleCallback = new ItemTouchHelper.SimpleCallback(0,
                ItemTouchHelper.RIGHT | ItemTouchHelper.LEFT) {
            @Override
            public boolean onMove(@NonNull RecyclerView recyclerView,
                                  @NonNull RecyclerView.ViewHolder viewHolder,
                                  @NonNull RecyclerView.ViewHolder target) {
                return false;
            }

            @Override
            public void onSwiped(@NonNull RecyclerView.ViewHolder viewHolder, int direction) {
                int position = viewHolder.getAdapterPosition();
                Object item = itemList.get(position);

                if (item instanceof Task) {
                    Task task = (Task) item;

                    if (direction == ItemTouchHelper.RIGHT) {
                        showConfirmationDialog(
                                "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É \"" + task.getTitle() + "\" –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—É—é?",
                                () -> {
                                    Intent intent = new Intent(getActivity(), EditTask.class);
                                    intent.putExtra("task_id", task.getId());
                                    intent.putExtra("returnFragment", "DoneFragment");
                                    intent.putExtra("restoreMode", true);
                                    ((Activity) getActivity()).startActivityForResult(intent, EditTask.REQUEST_EDIT_TASK);
                                    getActivity().overridePendingTransition(R.anim.fade_in_activity, R.anim.fade_out_activity);
                                },
                                () -> {
                                    recyclerView.getAdapter().notifyItemChanged(position);
                                }
                        );

                    } else if (direction == ItemTouchHelper.LEFT) {
                        showConfirmationDialog(
                                "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É \"" + task.getTitle() + "\"?",
                                () -> {
                                    deleteTask(task, position);
                                },
                                () -> {
                                    recyclerView.getAdapter().notifyItemChanged(position);
                                }
                        );
                    }
                } else {
                    recyclerView.getAdapter().notifyItemChanged(position);
                }
            }

            @Override
            public void onChildDraw(@NonNull Canvas c, @NonNull RecyclerView recyclerView,
                                    @NonNull RecyclerView.ViewHolder viewHolder,
                                    float dX, float dY, int actionState, boolean isCurrentlyActive) {

                if (actionState == ItemTouchHelper.ACTION_STATE_SWIPE) {
                    float maxSwipe = viewHolder.itemView.getWidth() / 2f; // –º–∞–∫—Å–∏–º—É–º 50% —à–∏—Ä–∏–Ω—ã
                    float newDX = Math.min(Math.max(dX, -maxSwipe), maxSwipe);

                    // –ï—Å–ª–∏ —Å–≤–∞–π–ø –∞–∫—Ç–∏–≤–µ–Ω (—Ä—É–∫–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ) ‚Äî –¥–≤–∏–≥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
                    if (isCurrentlyActive) {
                        super.onChildDraw(c, recyclerView, viewHolder, newDX, dY, actionState, true);
                    } else {
                        // –í–æ–∑–≤—Ä–∞—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã —Å–≤–∞–π–ø–∞
                        viewHolder.itemView.animate()
                                .translationX(0)
                                .setInterpolator(new OvershootInterpolator(2f)) // "–ø—Ä—É–∂–∏–Ω–∞"
                                .setDuration(400)
                                .start();
                    }
                } else {
                    super.onChildDraw(c, recyclerView, viewHolder, dX, dY, actionState, isCurrentlyActive);
                }
            }

        };

// –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–≤–∞–π–ø –∫ RecyclerView
        ItemTouchHelper itemTouchHelper = new ItemTouchHelper(simpleCallback);
        itemTouchHelper.attachToRecyclerView(recyclerView);

        return view;
    }

    private void showConfirmationDialog(String message, Runnable onConfirm, Runnable onCancel) {
        AlertDialog dialog = new AlertDialog.Builder(getContext(), R.style.CustomDialog)
                .setMessage(message)
                .setPositiveButton("–î–∞", (dialogInterface, which) -> onConfirm.run())
                .setNegativeButton("–û—Ç–º–µ–Ω–∞", (dialogInterface, which) -> onCancel.run())
                .setCancelable(false)
                .create(); // –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥, –Ω–æ –ø–æ–∫–∞ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º

        dialog.getWindow().setBackgroundDrawableResource(R.drawable.dialog_background); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–π —Ñ–æ–Ω
        dialog.show(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥

        // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç–∞ –∏–∑ —Ä–µ—Å—É—Ä—Å–æ–≤
        int positiveColor = ContextCompat.getColor(getContext(), R.color.all_text);
        int negativeColor = ContextCompat.getColor(getContext(), R.color.all_text);
        int messageColor = ContextCompat.getColor(getContext(), R.color.title_text);

        // –ü–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞ –º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫–Ω–æ–ø–æ–∫
        dialog.getButton(AlertDialog.BUTTON_POSITIVE).setTextColor(positiveColor);  // "–î–∞"
        dialog.getButton(AlertDialog.BUTTON_NEGATIVE).setTextColor(negativeColor); // "–û—Ç–º–µ–Ω–∞"

        // **–ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è**
        TextView messageView = dialog.findViewById(android.R.id.message);
        if (messageView != null) {
            messageView.setTextColor(messageColor);
        }
    }

    private void markTaskAsCompleted(Task task, int position) {
        SQLiteDatabase database = db.getWritableDatabase();
        ContentValues values = new ContentValues();

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—É—é
        values.put(Util.KEY_STATUS, 1); // 1 = –∞–∫—Ç–∏–≤–Ω–∞—è
        values.put(Util.KEY_COMPLETED_AT, " "); // –£–±–∏—Ä–∞–µ–º –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

        Log.d("RestoreDebug", "prevReminder: " + task.getPreviousReminderEnabled());
        Log.d("RestoreDebug", "Restoring Task ID: " + task.getId());
        Log.d("RestoreDebug", "Restored Task Date: " + task.getDate());
        Log.d("RestoreDebug", "Restored Task Time: " + task.getTime());

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –≤–∫–ª—é—á–µ–Ω–æ
        boolean reminderEnabled = false;

        if (task.getPreviousReminderEnabled() == 1) {
            String date = task.getDate();
            String time = task.getTime();
            if (!date.isEmpty() && !time.isEmpty()) {
                String dateTimeString = date + " " + time;
                try {
                    SimpleDateFormat dateFormat = new SimpleDateFormat("dd.MM.yyyy HH:mm", Locale.getDefault());
                    Date dateTime = dateFormat.parse(dateTimeString);

                    Log.d("RestoreDebug", "Parsed DateTime: " + dateTime);

                    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
                    Log.d("RestoreDebug", "Current time: " + new Date());

                    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –¥–æ 1 –º–∏–Ω—É—Ç—ã
                    long diffInMilliseconds = dateTime.getTime() - new Date().getTime();
                    Log.d("RestoreDebug", "Time difference (ms): " + diffInMilliseconds);

                    if (dateTime != null && diffInMilliseconds > -60000) { // 1 –º–∏–Ω—É—Ç–∞ –¥–æ–ø—É—Å–∫–∞
                        reminderEnabled = true;
                    } else {
                        Log.d("RestoreDebug", "Task is too old or not yet due: " + task.getTitle());
                    }
                } catch (Exception e) {
                    Log.e("RestoreDebug", "Error parsing date/time", e);
                }
            }
        }

// –õ–æ–≥–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        Log.d("RestoreDebug", "ReminderEnabled before update: " + reminderEnabled);

// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –æ–±—ä–µ–∫—Ç–µ –∏ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        task.setReminderEnabled(reminderEnabled ? 1 : 0);
        values.put(Util.KEY_REMINDER_ENABLED, reminderEnabled ? 1 : 0);

// –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        database.update(Util.TABLE_NAME, values, Util.KEY_ID + " = ?", new String[]{String.valueOf(task.getId())});

// –õ–æ–≥–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        Log.d("RestoreDebug", "ReminderEnabled after update: " + task.getReminderEnabled());

// –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
        itemList.remove(position);
        recyclerView.getAdapter().notifyItemRemoved(position);

        checkAndRemoveEmptyCategory(task);
        checkTasks();


        // –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        Log.d("ReminderCheck", "ReminderEnabled: " + reminderEnabled);

        // –ï—Å–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
        if (reminderEnabled && !task.getDate().isEmpty() && !task.getTime().isEmpty()) {
            try {
                SimpleDateFormat dateFormat = new SimpleDateFormat("dd.MM.yyyy HH:mm", Locale.getDefault());
                Date dateTime = dateFormat.parse(task.getDate() + " " + task.getTime());

                Log.d("ReminderCheck", "Parsed Date: " + dateTime);

                if (dateTime != null && dateTime.after(new Date())) {
                    Log.d("ReminderCheck", "Setting reminder for task: " + task.getTitle());
                    ReminderHelper.setAlarm(getContext(), task);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }


    private void deleteTask(Task task, int position) {
        if (getContext() != null) {
            ReminderHelper.cancelAlarm(getContext(), task);
        } else {
            Log.e("TaskAdapter", "Context is null. Cannot cancel alarm.");
        }

        SQLiteDatabase database = db.getWritableDatabase();
        database.delete(Util.TABLE_NAME, Util.KEY_ID + " = ?", new String[]{String.valueOf(task.getId())});
        database.close();

        // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
        itemList.remove(position);
        recyclerView.getAdapter().notifyItemRemoved(position);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É–¥–∞–ª—è–µ–º –ø—É—Å—Ç—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        checkAndRemoveEmptyCategory(task);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç –ª–∏ —ç–∫—Ä–∞–Ω
        checkTasks();
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—É—Å—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    private void checkAndRemoveEmptyCategory(Task task) {
        String category = task.getCategory(); // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞—á–∏
        if (category == null || category.isEmpty()) return; // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç ‚Äî –≤—ã—Ö–æ–¥–∏–º

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –∑–∞–¥–∞—á–∏ —Å —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
        boolean isCategoryEmpty = true;
        for (Object obj : itemList) {
            if (obj instanceof Task) {
                Task currentTask = (Task) obj;
                if (category.equals(currentTask.getCategory())) {
                    isCategoryEmpty = false;
                    break;
                }
            }
        }

        // –ï—Å–ª–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –∑–∞–¥–∞—á ‚Äî —É–¥–∞–ª—è–µ–º –µ—ë –∏–∑ —Å–ø–∏—Å–∫–∞
        if (isCategoryEmpty) {
            itemList.removeIf(obj -> obj instanceof String && obj.equals(category));

            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥–∞–ø—Ç–µ—Ä
            recyclerView.getAdapter().notifyDataSetChanged();
        }
    }

    private void loadItems() {
        itemList.clear();
        LinkedHashMap<String, List<Task>> categoryMap = new LinkedHashMap<>();
        SQLiteDatabase database = db.getReadableDatabase();

        // –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        Cursor cursor = database.query(Util.TABLE_NAME, null, Util.KEY_STATUS + " = ?",
                new String[]{"0"}, null, null, Util.KEY_CATEGORY);

        if (cursor != null && cursor.moveToFirst()) {
            do {
                Task task = new Task();
                task.setId(cursor.getInt(cursor.getColumnIndexOrThrow(Util.KEY_ID)));
                task.setTitle(cursor.getString(cursor.getColumnIndexOrThrow(Util.KEY_TITLE)));
                String category = cursor.getString(cursor.getColumnIndexOrThrow(Util.KEY_CATEGORY));
                if (category == null || category.isEmpty()) {
                    category = "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏";
                }
                task.setCategory(category);

                task.setDescription(cursor.getString(cursor.getColumnIndexOrThrow(Util.KEY_DESCRIPTION)));

                // –î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å)
                task.setCompletedAt(cursor.getString(cursor.getColumnIndexOrThrow(Util.KEY_COMPLETED_AT)));

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
                task.setPreviousReminderEnabled(cursor.getInt(cursor.getColumnIndexOrThrow(Util.KEY_PREVIOUS_REMINDER_ENABLED)));

                // –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω—É–∂–Ω–∞)
                task.setDate(cursor.getString(cursor.getColumnIndexOrThrow(Util.KEY_DATE)));

                // –í—Ä–µ–º—è (–µ—Å–ª–∏ –±—ã–ª–æ)
                String time = cursor.getString(cursor.getColumnIndexOrThrow(Util.KEY_TIME));
                task.setTime(time);

                // –õ–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                Log.d("LoadDebug", "Loaded Task: " + task.getTitle() + " completedAt: " + task.getCompletedAt());

                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                if (!categoryMap.containsKey(category)) {
                    categoryMap.put(category, new ArrayList<>());
                }
                categoryMap.get(category).add(task);
            } while (cursor.moveToNext());
            cursor.close();
        }
        database.close();

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" –ø–µ—Ä–≤–æ–π, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
        List<String> sortedCategories = new ArrayList<>(categoryMap.keySet());
        Collections.sort(sortedCategories, String.CASE_INSENSITIVE_ORDER);
        final String noCategory = "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏";
        if (sortedCategories.contains(noCategory)) {
            sortedCategories.remove(noCategory);
            sortedCategories.add(0, noCategory);
        }

        // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for (String category : sortedCategories) {
            List<Task> tasks = categoryMap.get(category);

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ completedAt ‚Äî –Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É
            tasks.sort((t1, t2) -> {
                if (t1.getCompletedAt() == null) return 1;
                if (t2.getCompletedAt() == null) return -1;
                return t2.getCompletedAt().compareTo(t1.getCompletedAt());
            });

            itemList.add(category); // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            itemList.addAll(tasks); // –ó–∞–¥–∞—á–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        }

        checkTasks();
        removeEmptyCategories();
    }


    private void loadItems2() {
        itemList.clear();
        LinkedHashMap<String, List<Task>> categoryMap = new LinkedHashMap<>();

        String today = new SimpleDateFormat("dd.MM.yyyy", Locale.getDefault()).format(new Date());
        SQLiteDatabase database = db.getReadableDatabase();

        Cursor cursor = database.query(Util.TABLE_NAME, null, Util.KEY_DATE + " = ? AND " + Util.KEY_STATUS + " = ?",
                new String[]{today, "1"}, null, null, Util.KEY_CATEGORY);

        if (cursor != null && cursor.moveToFirst()) {
            do {
                Task task = new Task();
                task.setId(cursor.getInt(cursor.getColumnIndexOrThrow(Util.KEY_ID)));
                task.setTitle(cursor.getString(cursor.getColumnIndexOrThrow(Util.KEY_TITLE)));
                task.setCategory(cursor.getString(cursor.getColumnIndexOrThrow(Util.KEY_CATEGORY)));
                task.setDate(cursor.getString(cursor.getColumnIndexOrThrow(Util.KEY_DATE)));
                task.setTime(cursor.getString(cursor.getColumnIndexOrThrow(Util.KEY_TIME)));  // –£–±–µ–¥–∏—Å—å, —á—Ç–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
                task.setDescription(cursor.getString(cursor.getColumnIndexOrThrow(Util.KEY_DESCRIPTION)));

                // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                Log.d("LoadDebug", "Loaded Task: " + task.getTitle() + " with time: " + task.getTime());

                task.setPriority(cursor.getInt(cursor.getColumnIndexOrThrow(Util.KEY_PRIORITY)));
                task.setReminderEnabled(cursor.getInt(cursor.getColumnIndexOrThrow(Util.KEY_REMINDER_ENABLED)));

                String category = task.getCategory();
                if (!categoryMap.containsKey(category)) {
                    categoryMap.put(category, new ArrayList<>());
                }
                categoryMap.get(category).add(task);
            } while (cursor.moveToNext());
            cursor.close();
        }
        database.close();

        // –õ–æ–≥–∏—Ä—É–µ–º, —Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –∑–∞–≥—Ä—É–∂–µ–Ω–æ
        Log.d("LoadDebug", "Loaded " + itemList.size() + " tasks for today");

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫
        for (String category : categoryMap.keySet()) {
            List<Task> tasks = categoryMap.get(category);
            tasks.sort((task1, task2) -> {
                if (task1.getTime() != null && !task1.getTime().isEmpty() && task2.getTime() != null && !task2.getTime().isEmpty()) {
                    return task1.getTime().compareTo(task2.getTime());
                } else if (task1.getTime() == null || task1.getTime().isEmpty()) {
                    return 1;
                } else {
                    return -1;
                }
            });

            itemList.add(category); // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            itemList.addAll(tasks);  // –í—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        }
        checkTasks();
    }


    private void checkTasks() {
        try {
            if (itemList.isEmpty()) {
                Random random = new Random();
                String message = COMPLETED_TASK_MESSAGES[random.nextInt(COMPLETED_TASK_MESSAGES.length)];
                emptyTextView.setText(message);
                emptyTextView.setVisibility(View.VISIBLE);
                recyclerView.setVisibility(View.GONE);
                emptyTextView.startAnimation(AnimationUtils.loadAnimation(getActivity(), R.anim.fade_in));
            } else {
                emptyTextView.setVisibility(View.GONE);
                recyclerView.setVisibility(View.VISIBLE);
            }
        } catch (Exception e) {
            Log.e("checkTasks", "–û—à–∏–±–∫–∞: " + e.getMessage(), e);
        }
    }

    private void removeEmptyCategories() {
        try {
            for (int i = itemList.size() - 1; i >= 0; i--) {
                if (itemList.get(i) instanceof String) { // –≠—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    String category = (String) itemList.get(i);

                    boolean hasTasks = false;
                    for (int j = i + 1; j < itemList.size(); j++) {
                        Object nextItem = itemList.get(j);
                        if (nextItem instanceof String) break; // –¥–æ—à–ª–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        if (nextItem instanceof Task) {
                            Task task = (Task) nextItem;
                            if (category.equals(task.getCategory())) {
                                hasTasks = true;
                                break;
                            }
                        }
                    }

                    if (!hasTasks) {
                        itemList.remove(i);
                    }
                }
            }
            recyclerView.getAdapter().notifyDataSetChanged();
        } catch (Exception e) {
            Log.e("removeEmptyCategories", "–û—à–∏–±–∫–∞: " + e.getMessage(), e);
        }
    }

    @Override
    public void onResume() {
        super.onResume();
        loadItems();
    }

    @Override
    public void onTaskUpdated() {
        Log.d("TaskUpdated", "onTaskUpdated –≤—ã–∑–≤–∞–Ω");  // –õ–æ–≥, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, —á—Ç–æ –º–µ—Ç–æ–¥ –±—ã–ª –≤—ã–∑–≤–∞–Ω

      loadItems();
   //   adapter.notifyDataSetChanged(); // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–∞–ø—Ç–µ—Ä, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
    }
}
